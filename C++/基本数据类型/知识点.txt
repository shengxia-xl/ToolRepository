C ++ 类的大小
https://blog.csdn.net/fengxinlinux/article/details/72836199
----------------------------------------------------------------------------------------------------

关于结构体计算的注意点：
1、static类型的变量，不计算在struct 对象的大小中
2、函数，不计算在struct 对象的大小中
3、空结构体大小为1(使空类或空结构体在实例化后在内存得到了独一无二的地址)

----------------------------------------------------------------------------------------------------
结构体对齐的原因：(浪费空间用来节省时间”，这就是结构对齐的主要原因)

结构体大小的计算方式：
1. 首先判断是否需要内存对齐(看环境)
2. 累加时，已经计算的结构体大小是当前的大小的倍数
3. 结构体总大小为结构体内最大类型的整数倍

1 2 4 = 8   1 + 1(补2) + 2 + 4
1 4 2 = 12  1 + 3(补2) + 4 + 2 + 2(补3)
2 1 4 = 8   2 + 1 + 1(补2) + 4
2 4 1 = 12  2 + 2(补2) + 4 + 1 + 3(补3)
4 1 2 = 8   4 + 1 + 2 + 1(补3)
4 2 1 = 8   4 + 2 + 1 + 1(补3)

注意点：
联合体大小就是成员中最大类型的大小
数组的话，计算方式为N个基本类型(相关3性质 char[10], 最大类型为char 而不是[10])
成员包含结构体的结构体(拆开来计算)

----------------------------------------------------------------------------------------------------
类中的继承
class A{

}
sizeof(A) = 1
空类大小为1 
普通函数  static类型的变量 都不计算在类的大小中
--------------------
class A {

}
class B: public A {
  int a;
}

sizeof(B) = 4 
A类中的1  不计算在B类的大小中
--------------------
class A {

}
class B {
  A a;
}

sizeof(B) = 1
当空类的对象作为成员变量时，大小计算为1
--------------------
class A {
  virtual void fun1();
  virtual void fun2();
}

sizeof(A) = 8 
当有虚函数存在的时候，会有虚表存在。 此时类大小为一个指针
--------------------
class  A {
  virtual void fun1();
  virtual void fun2();
}
class B: public A{
  virtual void fun3();    sizeof(B) = 8  在基类的虚函数后面追加 还是只有一个虚表
  //virtual void fun1();  sizeof(B) = 8  在派生类中对基类的虚函数进行覆盖   还是只有一个虚表
}
sizeof(B) = 8 
--------------------
class  A {
  virtual void fun1();
  virtual void fun2();
}
class  B {
  virtual void fun1();
  virtual void fun2();
}
class C:public A,public B {
}
sizeof(C) = 16

classB修改为
class  B {
  virtual void fun3();
  virtual void fun4();
}
大小不变

classC修改为
class C:public A,public B {
  virtual void fun1();
}
大小不变

classC修改为
class C:public A,public B {
  void fun1();
}
大小不变
--------------------
class A {
  int a;
  int b;
}

class B:public A {
  int c;
}

sizeof(B) = 12 

***********计算方法有误 

----------------------------------------------------------------------------------------------------
相关知识点：
虚函数表是如何继承的

class A {
  virtual void f();
}
class B {

}

Vptr -> A::f()
--------------------
（1）在派生类中不对基类的虚函数进行覆盖，同时派生类中还拥有自己的虚函数，比如有如下的派生类：
class A {
  virtual void f();
}
class B {
  virtual void f1();
}

Vptr -> A::f() -> B::f1()
1）虚函数按照其声明顺序放于表中。
2）基类的虚函数在派生类的虚函数前面。
--------------------
（2）在派生类中对基类的虚函数进行覆盖，假设有如下的派生类：
class A {
  virtual void f();
  virtual void g();
  virtual void h();
}
class B {

  virtual void f();
  virtual void g1();
  virtual void h1();
}
Vptr -> B::f() -> A::g() -> A::h() -> B::g1() -> B::g2()
1）覆盖的f()函数被放到了虚表中原来基类虚函数的位置。
2）没有被覆盖的函数依旧。
--------------------
（3）多继承：无虚函数覆盖
class A {
  virtual void f();
  virtual void g();
  virtual void h();
}
class B {
  virtual void f();
  virtual void g();
  virtual void h();
}

class C: public A,public B {
  virtual void f1();
}
Vptr1-> A::f() -> A::g() -> A::h() -> C::f1() 
Vptr2-> B::f() -> B::g() -> B::h() 
1） 每个基类都有自己的虚表。
2） 派生类的成员函数被放到了第一个基类的表中。（所谓的第一个基类是按照声明顺序来判断的）
--------------------

（4）多重继承，含虚函数覆盖 
class A {
  virtual void f();
  virtual void g();
  virtual void h();
}
class B {
  virtual void f();
  virtual void g();
  virtual void h();
}

class C: public A,public B {
  virtual void f();
  virtual void f1();
}
Vptr1-> C::f() -> A::g() -> A::h() -> C::f1() 
Vptr2-> C::f() -> B::g() -> B::h() 
----------------------------------------------------------------------------------------------------
unsigned 无法修饰float/double
可是浮点数是按照 整数部分，小数部分，指数部分存放的。运算也是分开来运算的。没法做这样的进位。

基本类型的打印
char           %c
bool           %d
short             %d
int            %d
unsigned int   %u
long           %ld
unsigned long  %lu
long long      %lld
float           %f
double         %lf
long double    %Lf

%d %u %ld %lld       
%f %lf %Lf
当格式使用不正确时，编译也能通过，但是精度会缺失

总结：
%d   %5d  %-5d  %05d  %02.3d(001)
%f   %1.2f  %3.2f

1）
%3d 输出3位整型数  不够3位,右对齐
%9.2f 输出场宽为9的浮点数   其中小数位为2,整数位为6,小数点占一位,不够9位右对齐
%8s 表示输出8个字符的字符串, 不够8个字符右对齐。

如果字符串的长度、或整型数位数超过说明的场宽, 将按其实际长度输出。
但对浮点数, 若整数部分位数超过了说明的整数位宽度, 将按实际整数位输出;
若小数部分位数超过了说明的小数位宽度, 则按说明的宽度以四舍五入输出。

另外, 若想在输出值前加一些0, 就应在场宽项前加个0。
例如: %04d 表示在输出一个小于4位的数值时, 将在前面补0使其总宽度
为4位。

如果用浮点数表示字符或整型量的输出格式, 小数点后的数字代表最大宽度,
小数点前的数字代表最小宽度。
例如: %6.9s 表示显示一个长度不小于6且不大于9的字符串。若大于9, 则
第9个字符以后的内容将被删除。


2）
可以在"%"和字母之间加小写字母l, 表示输出的是长型数。
例如: %ld 表示输出long整数
%lf 表示输出double浮点数


3）
可以控制输出左对齐或右对齐, 即在"%"和字母之间加入一个"-" 号可
说明输出为左对齐, 否则为右对齐。
例如: %-7d 表示输出7位整数左对齐
%-10s 表示输出10个字符左对齐