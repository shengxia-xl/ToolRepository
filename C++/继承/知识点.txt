C++继承
https://www.cnblogs.com/metalsteel/p/6280389.html

关于继承
private 继承：父类的public,protected类型成员继承为子类的private
protected 继承：父类的public,protected类型成员继承为子类的protected
public 继承：父类的public为子类的public ,protected类型成员继承为子类的protected

--------------------------------------------------------------------------
struct 默认无public成员
class 默认为private成员

缺省继承种类时，默认为private继承

----------------------------------------------------------------
继承二义性：
A : 子类 
	int a;
	void f();
B ：子类 
	int a;
	void f();
C ：public A, public B
	int a;
	void f(); 
D : public C
	int a;
	void f();

C c;
c.A::a; // A.a 
c.B::a; // B.a
c.C::a; // C.a
c.a; // C.a ***

c.A::f(); // A.f()
c.B::f(); // B.f()
c.C::f(); // C.f()
c.f(); // C.f()

D d;
d.a; // D.a
d.f(); // D.f()
-------------------------
C类中的A B 的继承顺序决定了A B 的初始化顺序
C：public A, public B   (A -> B -> C)
C：public B, public A   (B -> A -> C)

与C的初始化列表中的顺序没有关系
-------------------------
如果C类中有A B的成员变量
C ：public A, public B
	int a;
	A a1;
	B b1;
	A a2;
	B b2;
	void f();

初始化顺序：
继承 左 -> 右
变量 上 -> 下    
A(1) -> B(1) -> A(2) -> B(2) -> A(2) -> B(2) -> C 

1、(继承中基类的构造)
2、(C类中的成员变量的初始化)

-------------------------
构造与析构的顺序一定相反

-------------------------
重载overload：是函数名相同，参数列表不同 重载只是在类的内部存在。
重写override：也叫做覆盖。子类重新定义父类中有相同名称和参数的虚函数。函数特征相同。但是具体实现不同，主要是在继承关系中出现的 。
重定义 (redefining)也叫做隐藏:子类重新定义父类中有相同名称的非虚函数 ( 参数列表可以不同 ) 。

重写需要注意：
1 被重写的函数不能是static的。必须是virtual的
2 重写函数必须有相同的类型，名称和参数列表
3 重写函数的访问修饰符可以不同。尽管virtual是private的，派生类中重写改写为public,protected也是可以的

如果一个类，存在和父类相同的函数，那么，这个类将会覆盖其父类的方法，除非你在调用的时候，强制转换为父类类型，否则试图对子类和父类做类似重载的调用是不能成功的。 

1 成员函数重载特征：
   a 相同的范围（在同一个类中）
   b 函数名字相同
   c 参数不同
   d virtual关键字可有可无
2 重写（覆盖)是指派生类函数覆盖基类函数，特征是：
   a 不同的范围，分别位于基类和派生类中
   b 函数的名字相同
   c 参数相同
   d 基类函数必须有virtual关键字
3 重定义(隐藏)是指派生类的函数屏蔽了与其同名的基类函数，规则如下：
   a 如果派生类的函数和基类的函数同名，但是参数不同，此时，不管有无virtual，基类的函数被隐藏。
   b 如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有vitual关键字，此时，基类的函数被隐藏。\

虚函数的重载与重写