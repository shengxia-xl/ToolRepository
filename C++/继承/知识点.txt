C++继承
https://www.cnblogs.com/metalsteel/p/6280389.html
C++父类子类间函数重定义，虚函数重写（覆盖）以及重载
https://blog.csdn.net/cpp12341234/article/details/52195993
C++虚函数表剖析
https://blog.csdn.net/lihao21/article/details/50688337
深入理解C++的动态绑定和静态绑定
https://blog.csdn.net/chgaowei/article/details/6427731
https://blog.csdn.net/f2016913/article/details/70231785

关于继承
private 继承：父类的public,protected类型成员继承为子类的private
protected 继承：父类的public,protected类型成员继承为子类的protected
public 继承：父类的public为子类的public ,protected类型成员继承为子类的protected

--------------------------------------------------------------------------
struct 默认无public成员
class 默认为private成员

缺省继承种类时，默认为private继承

----------------------------------------------------------------
继承二义性：
A : 子类 
	int a;
	void f();
B ：子类 
	int a;
	void f();
C ：public A, public B
	int a;
	void f(); 
D : public C
	int a;
	void f();

C c;
c.A::a; // A.a 
c.B::a; // B.a
c.C::a; // C.a
c.a; // C.a ***

c.A::f(); // A.f()
c.B::f(); // B.f()
c.C::f(); // C.f()
c.f(); // C.f()

D d;
d.a; // D.a
d.f(); // D.f()
-------------------------
C类中的A B 的继承顺序决定了A B 的初始化顺序
C：public A, public B   (A -> B -> C)
C：public B, public A   (B -> A -> C)

与C的初始化列表中的顺序没有关系
-------------------------
如果C类中有A B的成员变量
C ：public A, public B
	int a;
	A a1;
	B b1;
	A a2;
	B b2;
	void f();

初始化顺序：
继承 左 -> 右
变量 上 -> 下    
A(1) -> B(1) -> A(2) -> B(2) -> A(2) -> B(2) -> C 

1、(继承中基类的构造)
2、(C类中的成员变量的初始化)

-------------------------
构造与析构的顺序一定相反

-------------------------
重载overload：是函数名相同，参数列表不同 重载只是在类的内部存在。
重写override：也叫做覆盖。子类重新定义父类中有相同名称和参数的虚函数。函数特征相同。但是具体实现不同，主要是在继承关系中出现的 。
重定义 (redefining)也叫做隐藏:子类重新定义父类中有相同名称的非虚函数 ( 参数列表可以不同 ) 。

重写需要注意：
1 被重写的函数不能是static的。必须是virtual的
2 重写函数必须有相同的类型，名称和参数列表
3 重写函数的访问修饰符可以不同。尽管virtual是private的，派生类中重写改写为public,protected也是可以的

如果一个类，存在和父类相同的函数，那么，这个类将会覆盖其父类的方法，除非你在调用的时候，强制转换为父类类型，否则试图对子类和父类做类似重载的调用是不能成功的。 

1 成员函数重载特征：
   a 相同的范围（在同一个类中）
   b 函数名字相同
   c 参数不同
   d virtual关键字可有可无
2 重写（覆盖)是指派生类函数覆盖基类函数，特征是：
   a 不同的范围，分别位于基类和派生类中
   b 函数的名字相同
   c 参数相同
   d 基类函数必须有virtual关键字
3 重定义(隐藏)是指派生类的函数屏蔽了与其同名的基类函数，规则如下：
   a 如果派生类的函数和基类的函数同名，但是参数不同，此时，不管有无virtual，基类的函数被隐藏。
   b 如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有vitual关键字，此时，基类的函数被隐藏。\

-------------------------

重定义深度讨论

class A : 子类
	void f();
	void f(int a);

class AA: public A
	void f();

AA* aa = new AA();
int a1;
aa.f();// AA.f()
aa.f(a1)// error 没有这个函数   函数继承失败。直接被覆盖

-------------------------
class A : 子类
	void f();

class AA: public A
	int f();

AA* aa = new AA();
aa.f();// AA.f()
-------------------------
class A : 子类
	void f();
	virtual void g();

class AA: public A
	void f();
	int g();

AA* aa = new AA();
aa.g();// error 报错重写虚函数返回类型有差异

------------------------

虚函数 纯虚函数 虚函数表

class A {

}

class B {
	virtual void f();
}

sizeof(A);//1 
sizeof(B);//8   虚函数表的内存地址指针


---------------------------
动态绑定 静态绑定
C++中的动态绑定主要是由虚函数来实现的

静态绑定：编译时绑定， 通过对象调用 
动态绑定：运行时绑定，通过地址实现 

静态多态：a:函数多态（重载） b:模板多态（类模板和函数模板） 
动态多态： a:虚函数机制；b:RTTI

class B  
{  
 virtual void vfun(int i = 10);  
}  
class D : public B  
{  
 virtual void vfun(int i = 20);  
}  
D* pD = new D();  
B* pB = pD;  
pD->vfun();  //20
pB->vfun();  //10

虚函数是动态绑定的，但是为了执行效率，缺省参数是静态绑定的。
“绝不重新定义继承而来的缺省参数（Never redefine function’s inherited default parameters value.）”
