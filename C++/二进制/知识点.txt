参考：什么是 原码 反码 补码
https://blog.csdn.net/u011080472/article/details/51280919
参考：关于反码加减溢出
https://blog.csdn.net/skydcl/article/details/72638360
参考： 运算符优先列表
https://www.jb51.net/article/37282.htm
参考： 位移运算相关的应用
https://blog.csdn.net/zouliping123/article/details/8995373
参考： 逻辑移位和算数移位
https://blog.csdn.net/hengshan/article/details/6440549

--------------------------------------------------------------------------------------------------------------
机器数
机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.


真值
将带符号位的机器数对应的真正数值称为机器数的真值
例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1


原码
原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:
[+1]原 = 0000 0001
[-1]原 = 1000 0001

第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:
[1111 1111 , 0111 1111]，即：[-127 , 127]

原码是人脑最容易理解和计算的表示方式.


反码
反码的表示方法是：正数的反码是其本身；的反码是在其原码的基础上, 符号位不变，其余各个位取反。
[+1] = [00000001]原 = [00000001]反
[-1] = [10000001]原 = [11111110]反

可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算。


补码
补码的表示方法是：正数的补码就是其本身；的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
[+1] = [00000001]原 = [00000001]反 = [00000001]补
[-1] = [10000001]原 = [11111110]反 = [11111111]补

对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.
--------------------------------------------------------------------------------------------------------------

计算机内的表示和运算都使用补码


为何要使用原码, 反码和补码
反码： 使计算机中只有加法
补码： 去除 -0 +0   表示一个最低数
eg:
1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2
如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.


1 - 1 = 1 + (-1)
= [0000 0001]原 + [1000 0001]原
= [0000 0001]反 + [1111 1110]反
= [1111 1111]反 = [1000 0000]原
= -0

发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在”0”这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]原和[1000 0000]原两个编码表示0.

1-1 = 1 + (-1)
= [0000 0001]原 + [1000 0001]原
= [0000 0001]补 + [1111 1111]补
= [0000 0000]补=[0000 0000]原

使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].
--------------------------------------------------------------------------------------------------------------

关于补码的溢出：

原来符号位只有一个，现在为了方便再加一个。
正数：00 负数 11
结果01时，结果为正，发生正溢出（正数太大了）
结果10时，结果为负，发生负溢出（负数太小了）
还是00或11就是没有溢出了。


--------------------------------------------------------------------------------------------------------------


5 <</>>  左移/右移 变量<<表达式 左到右 双目运算符
8 & 按位与 表达式&表达式 左到右 双目运算符
9 ^ 按位异或 表达式^表达式 左到右 双目运算符
10 | 按位或 表达式|表达式 左到右 双目运算符
11 && 逻辑与 表达式&&表达式 左到右 双目运算符
12 || 逻辑或 表达式||表达式 左到右 双目运算符

按照优先级排列

&(或)运算  
eg:if(n % 2 == 0) >> if((n&1) == 0)

|(或)运算  
eg:判定当前文件是否有读、写、执行权限  
XXX权限 | 1(读权限) 如果结果为1，则有读权限

~(非)运算
eg:x-y = x + ~y +1
~y = -y -1;
~11 = -11-1 = -12

^(异或)运算
两个相同的数会变成0，反之是1
eg:交换两个整数
void swap(int& x , int& y)
{
    x ^= y;
    y ^= x;
    x ^= y;
}

<< 左移
右边空出的位用0填补
高位左移溢出则舍弃该高位。

>> 右移
左边空出的位用0或者1填补。正数用0填补，负数用1填补。注：不同的环境填补方式可能不同；
低位右移溢出则舍弃该位。
--------------------------------------------------------------------------------------------------------------

逻辑移位：移出去的位丢弃，空缺位（vacant bit）用 0 填充。
算术移位：移出去的位丢弃，空缺位（vacant bit）用“符号位”来填充，所以一般用在右移运算中。

c++中，整数分有符号数和无符号数两种，对于这两种数做左移、右移运算，稍有区别：
1、如果是无符号数，不管是左移还是右移都是“逻辑移位”
2、如果是有符号数，
    如果是做左移运算，那么做的是“逻辑移位”，同 1中无符号数的左移。

    如果是做右移运算，那么做的是“算术移位”。