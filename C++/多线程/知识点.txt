进程和线程的区别
https://www.cnblogs.com/zhuzhu2016/p/5804875.html 

线程与进程间
进程：是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。
线程：是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。


为什么会有线程？
每个进程都有自己的地址空间，即进程空间，在网络或多用户换机下，一个服务器通常需要接收大量不确定数量用户的并发请求，为每一个请求都创建一个进程显然行不通（系统开销大响应用户请求效率低），因此操作系统中线程概念被引进。

线程的执行过程是线性的，尽管中间会发生中断或者暂停，但是进程所拥有的资源只为改线状执行过程服务，一旦发生线程切换，这些资源需要被保护起来。
进程分为单线程进程和多线程进程，单线程进程宏观来看也是线性执行过程，微观上只有单一的执行过程。多线程进程宏观是线性的，微观上多个执行操作。
线程的改变只代表CPU的执行过程的改变，而没有发生进程所拥有的资源的变化。


进程线程的区别：
1.地址空间：同一进程的线程共享本进程的地址空间，而进程之间则是独立的地址空间。
2.资源拥有：
  同一进程内的线程共享本进程的资源如内存、I/O、cpu等，但是进程之间的资源是独立的。
  一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。
  进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程
3.执行过程：每个独立的进程程有一个程序运行的入口、顺序执行序列和程序入口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。
4.线程是处理器调度的基本单位，但是进程不是。
5.两者均可并发执行。

线程间通讯
1.使用全局变量
由于属于同一个进程的各个线程共享操作系统分配该进程的资源，故解决线程间通信最简单的一种方法是使用全局变量。对于标准类型的全局变量，我们建议使用volatile 修饰符，它告诉编译器无需对该变量作任何的优化，即无需将它放到一个寄存器中，并且该值可被外部改变。如果线程间所需传递的信息较复杂，我们可以定义一个结构，通过传递指向该结构的指针进行传递信息。
2.使用自定义消息
我们可以在一个线程的执行函数中向另一个线程发送自定义的消息来达到通信的目的。一个线程向另外一个线程发送消息是通过操作系统实现的。利用Windows操作系统的消息驱动机制，当一个线程发出一条消息时，操作系统首先接收到该消息，然后把该消息转发给目标线程，接收消息的线程必须已经建立了消息循环。


线程间同步
MFC提供了多种同步对象，下面我们只介绍最常用的四种：
临界区（CCriticalSection）
事件（CEvent）
互斥量（CMutex）
信号量（CSemaphore）

CCriticalSection 类
  当多个线程访问一个独占性共享资源时,可以使用“临界区”对象。任一时刻只有一个线程可以拥有临界区对象，拥有临界区的线程可以访问被保护起来的资源或代码段，其他希望进入临界区的线程将被挂起等待，直到拥有临界区的线程放弃临界区时为止，这样就保证了不会在同一时刻出现多个线程访问共享资源。

CEvent 类
  CEvent 类提供了对事件的支持。事件是一个允许一个线程在某种情况发生时，唤醒另外一个线程的同步对象。

CMutex 类
  互斥对象与临界区对象很像.互斥对象与临界区对象的不同在于:互斥对象可以在进程间使用,而临界区对象只能在同一进程的各线程间使用。当然，互斥对象也可以用于同一进程的各个线程间，但是在这种情况下，使用临界区会更节省系统资源，更有效率。

CSemaphore 类
　　当需要一个计数器来限制可以使用某个线程的数目时，可以使用“信号量”对象。CSemaphore 类的对象保存了对当前访问某一指定资源的线程的计数值，该计数值是当前还可以使用该资源的线程的数目。如果这个计数达到了零，则所有对这个CSemaphore 类对象所控制的资源的访问尝试都被放入到一个队列中等待，直到超时或计数值不为零时为止。一个线程被释放已访问了被保护的资源时，计数值减1；一个线程完成了对被控共享资源的访问时，计数值增1。这个被CSemaphore 类对象所控制的资源可以同时接受访问的最大线程数在该对象的构建函数中指定。


管道
    普通管道 子父类才能通信 单向
    全双工管道  双向
    匿名管道 任意进程
信号量 
    信号量是一个整数 count，提供两个原子(atom，不可分割)操作：P 操作和 V 操作
    P操作 (wait操作)：count 减1；如果 count < 0 那么挂起执行线程；
    V操作 (signal操作)：count 加1；如果 count <= 0 那么唤醒一个执行线程；   
共享内存 
    共享内存是通过将共享的内存缓冲区直接附加到进程的虚拟地址空间中来实现的，它是利用内存缓冲区直接交换信息，不需要复制，很快捷、信息量大。
消息队列 
    消息队列缓冲是由系统调用函数来实现消息发送和接收之间的同步，它允许任意进程通过共享消息队列来实现进程间通信．但是信息的复制需要耗费大量CPU，所以不适用于信息量大或操作频繁的场合。
TCP/IP 网络通信


与多线程相关的关键字
exlipct 不能隐式转换 一个函数的构造函数中
volunte 不优化 每次都从实际地址去取